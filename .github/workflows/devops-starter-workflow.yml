name: Build and Deploy to AKS
on:
  push:
    branches:
      - master

env:
  RESOURCEGROUPNAME: "sw-news-rg"
  LOCATION: "westeurope"
  LOCATIONNAME: "West Europe"
  SUBSCRIPTIONID: "02b977dc-c04f-4a17-bcaa-b9fbcc4244ad"
  IMAGENAME: "skyworkznews587c"
  REGISTRYSKU: "Basic"
  REGISTRYNAME: "skyworkznewsacr"
  REGISTRYLOCATION: "westeurope"
  CLUSTERNAME: "skyworkz-news-kube"
  APPINSIGHTSLOCATION: "westeurope"
  CLUSTERLOCATION: "westeurope"
  AGENTCOUNT: "1"
  AGENTVMSIZE: "Standard_DS1_v2"
  KUBERNETESVERSION: 1.17.13
  OMSLOCATION: "westeurope"
  OMSWORKSPACENAME: "skyworkznews2d68"
  HTTPSAPPLICATIONROUTINGENABLED: false
  KUBERNETESAPI: "apps/v1"
  NAMESPACE: "default"
  COSMOSNAME: "skyworkz-news-cosmos-db"
  COSMOSSQLNAME: "skyworkz-news-cosmos-db-sql"
  APPGWNAME: "skyworkz-news-app-gw"
  APPGWTIER: "Standard_v2"
  APPGWSKU: "Standard_v2"
  APPGWCAPACITY: 1
  APPGWMAXCAPACITY: 3
  APPGWSUBNET: "gw"


jobs:
  build:
    name: Build and push image to container registry
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Create Virtual Net
      uses: azure/arm-deploy@v1
      id: createVnet
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/v-net.json
    - name: Create Public IP
      uses: azure/arm-deploy@v1
      id: createPublicIp
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/public-ip.json
    - name: Create CosmosDB
      uses: Azure/CLI@v1
      id: createCosmosDB
      with:
        inlineScript: |
          #!/bin/bash
          if $(az cosmosdb check-name-exists --name ${{ env.COSMOSNAME }}) ; then
            echo "Cosmos DB Account already exists, skipping creation..."
          else
            az cosmosdb create -n ${{ env.COSMOSNAME }} -g ${{ env.RESOURCEGROUPNAME }} --subscription ${{ env.SUBSCRIPTIONID }}
            az cosmosdb sql database create -a ${{ env.COSMOSNAME }} -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.COSMOSSQLNAME }}
          fi
    - name: Create Application Gateway
      uses: azure/arm-deploy@v1
      id: createAppGw
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/app-gw.json
        parameters: applicationGatewayName="${{ env.APPGWNAME }}" location="${{ env.LOCATION }}" tier="${{ env.APPGWTIER }}" skuSize="${{ env.APPGWSKU }}" capacity="${{ env.APPGWCAPACITY }}" subnetName="${{ env.APPGWSUBNET }}" autoScaleMaxCapacity="${{ env.APPGWMAXCAPACITY }}"
    - name: Create AKS Cluster
      uses: azure/arm-deploy@v1
      id: deploy
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/aks-template.json
        parameters: clusterName="${{ env.CLUSTERNAME }}" appInsightsLocation="${{ env.APPINSIGHTSLOCATION }}" clusterLocation="${{ env.CLUSTERLOCATION }}" agentCount="${{ env.AGENTCOUNT }}" agentVMSize="${{ env.AGENTVMSIZE }}" kubernetesVersion="${{ env.KUBERNETESVERSION }}" omsLocation="${{ env.OMSLOCATION }}" omsWorkspaceName="${{ env.OMSWORKSPACENAME }}" httpApplicationRoutingEnabled="${{ env.HTTPSAPPLICATIONROUTINGENABLED }}"  dnsPrefix="${{ env.CLUSTERNAME }}"
    - name: Create ACR
      id: createACR
      run: |
          az acr create -n ${{ env.REGISTRYNAME }} -g ${{ env.RESOURCEGROUPNAME }} --location "${{env.REGISTRYLOCATION}}" --sku ${{env.REGISTRYSKU}} --admin-enabled
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"

    - name: Build and push image to ACR
      id: build-image
      run: |
        echo "::add-mask::${{ steps.createACR.outputs.acr_password }}"
        docker login ${{ env.REGISTRYNAME }}.azurecr.io --username ${{ steps.createACR.outputs.acr_username }} --password ${{ steps.createACR.outputs.acr_password }}
        docker build "$GITHUB_WORKSPACE/Application" -f  "Application/Dockerfile" -t ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
 
  deploy:
    name: Deploy application to AKS
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS Credentials
      id: getContext
      run: |
          az aks get-credentials --resource-group ${{ env.RESOURCEGROUPNAME }} --name ${{ env.CLUSTERNAME }} --file $GITHUB_WORKSPACE/kubeconfig
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep ${{ env.NAMESPACE }} | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace ${{ env.NAMESPACE }}`
        fi

    - name: Get ACR credentials
      id: getACRCred
      run: |
           echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username | xargs`"
           echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"
           echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"

    - uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        container-registry-url: ${{ env.REGISTRYNAME }}.azurecr.io
        container-registry-username: ${{ steps.getACRCred.outputs.acr_username }}
        container-registry-password: ${{ steps.getACRCred.outputs.acr_password }}
        secret-name: ${{ env.CLUSTERNAME }}dockerauth

    - name: Fetch Application insights key
      id: GetAppInsightsKey
      run: |
        echo "::set-output name=AIKey::`az resource show -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.CLUSTERNAME }} --resource-type "Microsoft.Insights/components" --query "properties.InstrumentationKey" -o tsv`"
        echo "::add-mask::`az resource show -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.CLUSTERNAME }} --resource-type "Microsoft.Insights/components" --query "properties.InstrumentationKey" -o tsv`"

    - uses: azure/k8s-bake@v1
      id: bakeManifests
      with:
        renderEngine: 'helm'
        helmChart: './Application/charts/sampleapp' 
        overrideFiles: './Application/charts/sampleapp/values.yaml'
        overrides: |
            image.repository:${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}
            image.tag:${{ github.sha }}
            imagePullSecrets:{${{ env.CLUSTERNAME }}dockerauth}
            applicationInsights.InstrumentationKey:${{ steps.GetAppInsightsKey.outputs.AIKey }}
            apiVersion:${{ env.KUBERNETESAPI }}
            extensionApiVersion:${{ env.KUBERNETESAPI }}
        helm-version: 'latest' 
        silent: 'true'

    - uses: azure/k8s-deploy@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        manifests: ${{ steps.bakeManifests.outputs.manifestsBundle }}
        images: |
          ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.CLUSTERNAME }}dockerauth

    - name: Helm tool installer
      uses: Azure/setup-helm@v1.1
    - name: Install ingress helm package
      run: |
        helm repo add application-gateway-kubernetes-ingress https://appgwingress.blob.core.windows.net/ingress-azure-helm-package/
        helm repo update
        if helm status ingress-azure | grep -q deployed ; then
          echo "helm package already deployed"
        else
          helm install ingress-azure application-gateway-kubernetes-ingress/ingress-azure \
          --namespace default \
          --debug \
          --set appgw.name=${{ env.APPGWNAME }} \
          --set appgw.resourceGroup=${{ env.RESOURCEGROUPNAME }} \
          --set appgw.subscriptionId=${{ env.SUBSCRIPTIONID }} \
          --set appgw.usePrivateIP=false \
          --set appgw.shared=false \
          --set armAuth.type=servicePrincipal \
          --set armAuth.secretJSON=${{ secrets.AZURE_SP_SECRET }} \
          --set rbac.enabled=false \
          --set verbosityLevel=3 \
          --set kubernetes.watchNamespace=default \
          --version 1.3.0
        fi

    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v1
    - name: Setup AAD Pod Identity
      run: |
        kubectl apply -f https://raw.githubusercontent.com/Azure/aad-pod-identity/v1.6.0/deploy/infra/deployment.yaml
    - name: Create Application Gateway ingress controller in AKS
      run: |
        openssl ecparam -out frontend.key -name prime256v1 -genkey
        openssl req -new -sha256 -key frontend.key -out frontend.csr -subj "/CN=SkyworkzNews"
        openssl x509 -req -sha256 -days 365 -in frontend.csr -signkey frontend.key -out frontend.crt
        kubectl create secret tls skyworkz-news-secret --key frontend.key --cert frontend.crt --dry-run=client -o yaml | kubectl apply -f -
        wget -c https://raw.githubusercontent.com/viniciusmiguel/sw-news/master/ArmTemplates/ingress.yaml -O ingress.yaml
        kubectl apply -f ingress.yaml
    - name : Cleanup
      run: | 
        az logout
        rm -rf $GITHUB_WORKSPACE/kubeconfig
